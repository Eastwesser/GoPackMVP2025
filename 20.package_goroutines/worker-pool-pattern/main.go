package main

import (
	"context"
	"fmt"
	"runtime"
	"sync"
	"time"
)

/*
	–í —ç—Ç–æ–º –∫–æ–¥–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω Worker Pool ‚Äî –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤ (–≥–æ—Ä—É—Ç–∏–Ω), –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —á–∏—Å–ª–∞.
	–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sync.WaitGroup, context.Context –∏ runtime.NumCPU().
*/

func main() {
	baseKnowledge()
	workerPool() // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—ë—Ç –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
}

func baseKnowledge() {
	ctx := context.Background()
	fmt.Println(ctx)

	toDo := context.TODO()
	fmt.Println(toDo)

	withValue := context.WithValue(ctx, "name", "vasya")
	fmt.Println(withValue.Value("name"))

	withCancel, cancel := context.WithCancel(ctx)
	fmt.Println(withCancel.Err())
	cancel()
	fmt.Println(withCancel.Err())

	withDeadline, cancel := context.WithDeadline(ctx, time.Now().Add(time.Second*3))
	defer cancel()
	fmt.Println(withDeadline.Deadline())
	fmt.Println(withDeadline.Err())
	fmt.Println(<-withDeadline.Done())

	withTimeout, cancel := context.WithTimeout(ctx, time.Second*2)
	defer cancel()
	fmt.Println(withTimeout.Done())
}

func workerPool() {

	ctx, cancel := context.WithCancel(context.Background())
	ctx, cancel = context.WithTimeout(context.Background(), time.Millisecond*20) // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –Ω–∞ 20 –º—Å.
	defer cancel()                                                               // cancel() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã.

	wg := &sync.WaitGroup{} // –°–æ–∑–¥–∞—ë–º WaitGroup ‚Äî –æ–Ω –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤.

	/*
		–°–æ–∑–¥–∞—ë–º –¥–≤–∞ –∫–∞–Ω–∞–ª–∞:
			numbersToProcess üì¶ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
			processedNumbers ‚úÖ ‚Äî –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
	*/
	numbersToProcess, processedNumbers := make(chan int, 5), make(chan int, 5)

	for i := 0; i <= runtime.NumCPU(); i++ { //  –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ (—Å—Ç–æ–ª—å–∫–æ –∂–µ, —Å–∫–æ–ª—å–∫–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞).
		wg.Add(1)
		go func() {
			defer wg.Done()
			/*
				–ö–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä:
					–ë–µ—Ä—ë—Ç —á–∏—Å–ª–æ –∏–∑ numbersToProcess.
						–í—ã—á–∏—Å–ª—è–µ—Ç –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç.
						–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ processedNumbers.
						–†–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ –∫–∞–Ω–∞–ª –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –∏—Å—Ç–µ—á—ë—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç.
			*/
			worker(ctx, numbersToProcess, processedNumbers)
		}()
	}

	go func() {
		// –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–Ω–∞–ª –∑–∞–¥–∞—á–∞–º–∏ (0...999).
		for i := 0; i < 1000; i++ {
			if i == 500 {
				cancel()
			}
			numbersToProcess <- i
		}
		close(numbersToProcess) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ —á–∏—Å–ª–∞.
	}()

	go func() {
		wg.Wait()               // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤.
		close(processedNumbers) //  –ó–∞–∫—Ä—ã–≤–∞–µ–º processedNumbers, –∫–æ–≥–¥–∞ –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏.
	}()

	var counter int
	for resultValue := range processedNumbers {
		counter++ //  –ß–∏—Ç–∞–µ–º –∏ –ø–µ—á–∞—Ç–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
		fmt.Println(resultValue)
	}

	fmt.Println(counter) // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞ ‚Äî –ø–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
func worker(ctx context.Context, toProcess <-chan int, processed chan<- int) {
	for {
		select {
		case <-ctx.Done():
			// –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω, –≤–æ—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.
			return
		case value, ok := <-toProcess:
			// –ß–∏—Ç–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.
			if !ok {
				//  –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç, –≤—ã—Ö–æ–¥–∏–º.
				return
			}
			time.Sleep(time.Millisecond) //  –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã (Sleep –Ω–∞ 1 –º—Å).
			processed <- value * value   // –í—ã—á–∏—Å–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ processedNumbers.
		}
	}
}

/*
	–°–æ–∑–¥–∞—ë—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –Ω–∞ 20 –º—Å.
	–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤ (–ø–æ —á–∏—Å–ª—É —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞).
	–í –∫–∞–Ω–∞–ª numbersToProcess –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞ 0...999.
	–í–æ—Ä–∫–µ—Ä—ã —á–∏—Ç–∞—é—Ç —á–∏—Å–ª–∞, —Å—á–∏—Ç–∞—é—Ç –∏—Ö –∫–≤–∞–¥—Ä–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –≤ processedNumbers.
	–ö–æ–≥–¥–∞ –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∫–∞–Ω–∞–ª numbersToProcess –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
	–ö–æ–≥–¥–∞ –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏, processedNumbers —Ç–æ–∂–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
	–í—ã–≤–æ–¥—è—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞.
*/
